@model LOGHouseSystem.ViewModels.ExpeditionOrderIndexViewModel
@using LOGHouseSystem.Infra.Enums
@using LOGHouseSystem.ViewModels.Components;
@{
    ViewBag.Title = "Lista de Pedidos";
}
<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
<link rel="stylesheet" href="/vendor/Tiny-Vertical-Timeline-Plugin-with-jQuery-jQuery-UI/src/jquery.timeline.css">
<link rel="stylesheet" href="~/css/site.css">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>

<link href="~/vendor/datatables/datatables.bootstrap4.css" rel="stylesheet" />
<style>
    #actionsSelection {
        visibility: hidden;
    }

    .tl-date {
        display: none;
    }

    .tl-wrap {
        display: block;
        margin-left: 0em;
        padding: 15px 0 15px 20px;
        border-style: solid;
        border-color: #dee5e7;
        border-width: 0 0 0 4px;
    }

    .badge-packing-custom-color {
        background-color: #475e75; /* Cor desejada para a badge */
        color: #ffffff; /* Cor do texto na badge (opcional, ajuste conforme necessário) */
    }

    .badge-packing-finalize-custom-color {
        background-color: #84E1F9;
        color: #475e75;
    }

    .badge-separeted-custom-color {
        background-color: #7faabf;
        color: #475e75;
        ;
    }
</style>

<div id="errorAlert" class="alert alert-danger alert-dismissible fade show text-center" role="alert" style="display: none">

    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

@if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Integration)
{
    <div class="app-page-title">
        <div class="page-title-wrapper">
            <div class="page-title-heading">
                <div class="page-title-icon">
                    <i class="pe-7s-cart icon-gradient bg-happy-itmeo">
                    </i>
                </div>
                <div>
                    <h3 class="text-center mb-3">Pedidos de Integração</h3>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="app-page-title">
        <div class="page-title-wrapper">
            <div class="page-title-heading">
                <div class="page-title-icon">
                    <i class="pe-7s-cart icon-gradient bg-happy-itmeo">
                    </i>
                </div>
                <div>
                    <h3 class="text-center mb-3">Pedidos de Expedição</h3>
                </div>
            </div>
        </div>
    </div>
}



<form asp-controller="ExpeditionOrder" asp-action="ExpeditionOrderFilter" id="searchForm" method="post">
    <div class="form-row d-flex justify-content-center">

        <input type="hidden" name="UserLoged" id="user" value="@Model.Orders">

        <input type="hidden" name="pageFilter" id="pageFilter" value="@Model.Page">

        <div class="form-group col-md-3">
            <label for="cnpj">@Html.DisplayNameFor(model => model.Orders.Data[0].InvoiceNumber)</label>
            <input type="number" value="@Model.Filter.InvoiceNumber" class="form-control" name="InvoiceNumber" placeholder="Digite o número da NF" id="invoiceNumber">
        </div>

        @if (Model.UserLoged.PermissionLevel != PermissionLevel.Client)
        {
            <div class="form-group col-md-3">
                <label for="entryDate">@Html.DisplayNameFor(model => model.Orders.Data[0].ClientName)</label>
                <input type="text" value="@Model.Filter.ClientName" class="form-control" name="ClientName" id="searchInput" placeholder="Digite o nome do Cliente">
            </div>
        }



        @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Orders)
        {
            <div class="form-group col-md-3">
                <label for="issueDate">@Html.DisplayNameFor(model => model.Orders.Data[0].ExternalNumber)</label>
                <input type="text" value="@Model.Filter.ExternalNumber" class="form-control" name="ExternalNumber" id="ExternalNumber" placeholder="Numero do pedido">
            </div>
        }

        <div class="form-group col-md-3">
            <label for="issueDate">@Html.DisplayNameFor(model => model.Orders.Data[0].ShippingCompany)</label>
            <input type="text" value="@Model.Filter.ShippingCompany" class="form-control" name="ShippingCompany" id="OrderOrigin" placeholder="Digite o nome da Transportadora">
        </div>

        <div class="form-group col-md-3">
            <label for="issueDateStart">Data Inicio</label>
            <input type="date" value="@Model.Filter.IssueDateStart" class="form-control" name="IssueDateStart" id="IssueDateStart">
        </div>

        <div class="form-group col-md-3">
            <label for="issueDateEnd">Data Final</label>
            <input type="date" value="@Model.Filter.IssueDateEnd" class="form-control" name="IssueDateEnd" id="IssueDateEnd">
        </div>

        <div class="form-group col-md-3">
            <label for="permission">@Html.DisplayNameFor(model => model.Orders.Data[0].ShippingMethod)</label>
            <br />
            <select name="ShippingMethod" class="form-control" id="ShippingMethod">
                <option value="">Selecione</option>

                @foreach (var item in Enum.GetValues(typeof(ShippingMethodEnum)).Cast<ShippingMethodEnum>())
                {
                    if (Model.Filter.ShippingMethod != null && Model.Filter.ShippingMethod == item)
                    {
                        <option value="@item" selected>@Html.DisplayFor(modelItem => item)</option>
                    }
                    else
                    {
                        <option value="@item">@Html.DisplayFor(modelItem => item)</option>
                    }
                }

            </select>
        </div>

        <div class="form-group col-md-3">
            <label for="permission">@Html.DisplayNameFor(model => model.Orders.Data[0].OrderOrigin)</label>
            <br />
            <select name="OrderOrigin" class="form-control" id="OrderOrigin">
                <option value="">Selecione</option>

                @foreach (var item in Enum.GetValues(typeof(OrderOrigin)).Cast<OrderOrigin>())
                {
                    if (Model.Filter.OrderOrigin != null && Model.Filter.OrderOrigin == item)
                    {
                        <option value="@item" selected>@Html.DisplayFor(modelItem => item)</option>
                    }
                    else
                    {
                        <option value="@item">@Html.DisplayFor(modelItem => item)</option>
                    }
                }

            </select>
        </div>

        <div class="form-group col-md-3">
            <label for="permission">@Html.DisplayNameFor(model => model.Orders.Data[0].Status)</label>
            <br />
            <select name="Status" class="form-control" id="Status">
                <option value="">Selecione</option>
                @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Orders)
                {
                    @foreach (var item in Model.OrdersStatus)
                    {
                        if (Model.Filter.Status != null && Model.Filter.Status == item)
                        {
                            <option selected value="@item">@Html.DisplayFor(modelItem => item)</option>
                        }
                        else
                        {
                            <option value="@item">@Html.DisplayFor(modelItem => item)</option>
                        }
                    }
                }

                @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Integration)
                {
                    @foreach (var item in Model.IntegrationStatus)
                    {
                        if (Model.Filter.Status != null && Model.Filter.Status == item)
                        {
                            <option selected value="@item">@Html.DisplayFor(modelItem => item)</option>
                        }
                        else
                        {
                            <option value="@item">@Html.DisplayFor(modelItem => item)</option>
                        }
                    }
                }
            </select>
        </div>

        <div class="form-group col-md-3">
            <label for="permission">@Html.DisplayNameFor(model => model.Orders.Data[0].ShippingTagBlocked)</label>
            <br />
            <select name="ShippingTagBlocked" class="form-control" id="ShippingTagBlocked">
                <option value="">Selecione</option>
                <option value="0">Etiquetas encontradas</option>
                <option value="1">Etiquetas não encontradas</option>
            </select>
        </div>

        <input type="hidden" id="hiddenInputToPagination" name="pageNumber" value="@Model.Orders.PageNumber" />

        <div class="">
            <button class="btn btn-light ml-3 mt-md-4 mb-sm-3 col-md-12" id="loadingSpinner" type="button">
                <i class="fa-solid fa-spinner fa-spin"></i>
            </button>
            <label for="issueDate"> </label>
            <button class="btn btn-primary ml-3 mt-2 mb-sm-3 col-md-12" type="submit" id="submitButton"><i class="fa fa-magnifying-glass mr-2"></i>Filtrar</button>
        </div>
    </div>

    <!--Pagination nav-->
    @if (Model?.TotalPages > 1 || Model?.Orders?.TotalPages > 1)
    {
        @Html.Partial("_PaginationListPager", new PaginationPagerModel
{
    Page = Model.PageNumber,
    PageCount = Model.TotalPages,
    InputIdForPage = "hiddenInputToPagination",
    FormToSubmit = "searchForm"
})

        @*<nav aria-label="Page navigation example row">
    <ul class="pagination">
    @if (Model.Orders.PageNumber > 1)
    {
    <li onclick="getValue(@Model.Orders.PageNumber - 1)" class="page-item"><a class="page-link" href="#">Anterior</a></li>

    }
    <input type="hidden" id="hiddenInputToPagination" name="pageNumber" value="@Model.Orders.PageNumber" />
    <input type="hidden" id="totalPagesHiddenInput" name="totalPages" value="@Model.Orders.TotalPages" />

    @if (Model.Orders.PageNumber > 3 && Model.Orders.TotalPages > 5)
    {
    <li onclick="getValue(1)" class="page-item active" name="PageNumber" value="1"><a class="page-link" type="submit">1</a></li>
    }

    @if (Model.Orders.PageNumber > 4 && Model.Orders.TotalPages > 5)
    {
    <li class="page-item"><span class="page-link">...</span></li>
    }

    @for (int i = Model.Orders.PageNumber - 2; i <= Model.Orders.PageNumber + 2; i++)
    {
    if (Model.Orders.PageNumber == (i))
    {
    <li onclick="getValue(@i)" class="page-item active" name="PageNumber" value="@Model.Orders.PageNumber"><a class="page-link active" type="submit">@i</a></li>
    }
    else if (i > 0 && i <= Model.Orders.TotalPages)
    {
    <li onclick="getValue(@i)" class="page-item" name="PageNumber" value="@Model.Orders.PageNumber"><a class="page-link" type="submit">@i</a></li>
    }
    }

    @if (Model.Orders.PageNumber < Model.Orders.TotalPages - 2 && Model.Orders.TotalPages > 5)
    {
    <li class="page-item"><span class="page-link">...</span></li>

    <li onclick="getValue(@Model.Orders.TotalPages)" class="page-item" name="PageNumber" value="@Model.Orders.PageNumber"><a class="page-link" type="submit">@Model.Orders.TotalPages</a></li>
    }


    @if (Model.Orders.TotalPages != Model.Orders.PageNumber)
    {
    <li onclick="getValue(@Model.Orders.PageNumber + 1)" class="page-item"><a class="page-link" href="#">Próximo</a></li>

    }
    <div class="input-group mb-3">
    <input type="number" id="inputToSearchPage" class="form-control col-md-2 ml-2" placeholder="Procurar Página">
    <div class="input-group-append">
    <button onclick="searchPage()" style="height: 39px; border-radius: 0rem 1rem 1rem 0rem" class="btn btn-outline-primary" type="button" id="seacrhByPageButton"><i class="fa fa-xs fa-fw fa-magnifying-glass"></i></button>
    </div>
    <p class="mt-3 ml-2"> Página @Model.Orders.PageNumber de @Model.Orders.TotalPages</p>
    </div>



    </ul>
    </nav>*@
    }

</form>




<form id="content-approve-recuse"></form>

<div class="col-lg-12 col-md-12 col-xs-12">
    <div class="main-card mb-3 card">
        <div class="card-body">
            @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Orders)
            {
                @if (Model.UserLoged.PermissionLevel != PermissionLevel.Client)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="col-md-3 "><span id="quantidadeSelecionada">0</span> pedido(s) selecionado(s)</div>
                        </div>
                        <div class="col-md-3">
                            <a class="btn btn-warning btn-block" id="btn-simplified-list" role="button" title="Imprimir Danfe Simplificada">Imprimir Danfe Simplificada</a>
                        </div>
                        <div class="col-md-3">
                            <a class="btn btn-primary btn-block" id="btn-picking-list" role="button" title="Gerar Lista de separação dos selecionados"><i class="fa fa-check"></i> Gerar Lista de separação dos selecionados</a>
                        </div>
                    </div>
                }

                <div>
                    <p>Mostrando de @Model.Orders.FirstRegisterInActualPage a @Model.Orders.LastRegisterInActualPage  de @Model.Orders.TotalRegisters registros</p>
                </div>


                <form id="frm-picking-list" action="/ExpeditionOrder/GeneratePickingList" method="POST" style="visibility: hidden;">
                    <div id="content-picking-list"></div>
                    <input name="observation" id="observation-picking-list">
                    <input name="priority" id="priority-picking-list">
                    <input name="marketplace" id="marketplace-picking-list">

                    <button id="submit-picking-list" type="submit"></button>
                </form>

                <form id="frm-picking-list" action="/ExpeditionOrder/GenerateSimplifiedDanfeList" target="_blank" method="GET" style="visibility: hidden;">
                    <div id="content-simplified-list"></div>
                    <button id="submit-simplified-list" type="submit"></button>
                </form>



            }
            else
            {
                <div class="row d-flex justify-content-end">
                    <div class="col-md-6 ">
                        <span id="quantidadeSelecionada" class="d-inline">0</span> pedido(s) selecionado(s)
                    </div>
                    <div class="col-md-3"></div>
                    <div class="col-md-3 actionsSelection">
                        <a class="btn btn-success btn-block btn-action" id="btn-accept" role="button" title="Aceitar">
                            <i class="fa-solid fa-check"></i>
                            Integrar Integrações
                        </a>
                    </div>
                    <div class="col-md-3 actionsSelection">
                        <a class="btn btn-danger btn-block btn-action" id="btn-reject" role="button" title="Recusar">
                            <i class="fa-solid fa-xmark"></i>
                            Excluir Integrações
                        </a>
                    </div>
                </div>
                <div>
                    <p>Mostrando de @Model.Orders.FirstRegisterInActualPage a @Model.Orders.LastRegisterInActualPage  de @Model.Orders.TotalRegisters registros</p>
                </div>
            }

            <br />

            <table id="datatable" class="table table-bordered" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th></th>
                        @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Orders)
                        {
                            <th>ID</th>
                        }

                        <th>
                            @Html.DisplayNameFor(model => model.Orders.Data[0].InvoiceNumber)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Orders.Data[0].ClientName)
                        </th>

                        <th>
                            @Html.DisplayNameFor(model => model.Orders.Data[0].ExternalNumber)
                        </th>

                        @*<th style="max-width: 300px">
                        @Html.DisplayNameFor(model => Model.Orders[0].Obs)
                        </th>*@

                        <th>
                            @Html.DisplayNameFor(model => model.Orders.Data[0].IssueDate)
                        </th>

                        <th>
                            Origem
                        </th>

                        <th>
                            @Html.DisplayNameFor(model => model.Orders.Data[0].ShippingMethod)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Orders.Data[0].Status)
                        </th>

                        <th class="text-center">
                            #
                        </th>

                    </tr>
                </thead>

                <tbody>
                    @if (Model.Orders != null && Model.Orders.Data.Any())
                    {
                        foreach (var item in Model.Orders.Data)
                        {

                            <tr class="@((item.ShippingTagBlocked ? "table-warning" : ""))">
                                <td>
                                    @item.Id
                                </td>
                                @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Orders)
                                {
                                    <td>
                                        @item.Id
                                    </td>
                                }
                                <td>
                                    @Html.DisplayFor(modelItem => item.InvoiceNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ClientName)
                                </td>

                                <td>

                                    @if(item.OrderOrigin == OrderOrigin.ClientPanel)
                                    {
                                            @Html.DisplayFor(modelItem => item.Obs)
                                    }
                                    else
                                    {
                                        @Html.DisplayFor(modelItem => item.ExternalNumber)
                                    }
                                </td>

                                <td name="issueDate">
                                    @item.IssueDate?.ToString("dd/MM/yyyy")
                                </td>
                                <td>
                                    @{
                                        string description = item.OrderOrigin.HasValue ? item.OrderOrigin.Value.GetDescription() : "-";
                                    }
                                    @description
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.ShippingMethod)
                                </td>

                                @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Integration)
                                {
                                    <td>
                                        <a class="btn btn-success btn-action" id="btn-accept-single" itemId="@item.Id" role="button" title="Aceitar" onclick="acceptSingle(this)">
                                            <i class="fa-solid fa-check"></i>
                                        </a>
                                        <a class="btn btn-danger btn-action" id="btn-reject-single" itemId="@item.Id" role="button" title="Recusar" onclick="rejectSingle(this)">
                                            <i class="fa-solid fa-xmark"></i>
                                        </a>
                                    </td>
                                }
                                else
                                {

                                    <td onclick="viewHistory(@item.Id)" data-toggle="modal" data-target="#exampleModalCenter">

                                        @if(item.Status == ExpeditionOrderStatus.ProcessingPendenting && Model.UserLoged.PermissionLevel != PermissionLevel.Admin && item.OrderOrigin == OrderOrigin.ClientPanel)
                                        {

                                            <span class="badge badge-warning">Aguardando integração</span>
                                        } 
                                        else
                                        {
                                            @switch (item.Status)
                                            {
                                                case ExpeditionOrderStatus.Processed:
                                                    <span class="badge badge-light">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                                case ExpeditionOrderStatus.Separated:
                                                    <span class="badge badge-separeted-custom-color">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                                case ExpeditionOrderStatus.InPacking:
                                                    <span class="badge badge-packing-custom-color">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                                case ExpeditionOrderStatus.ProcessingPendenting:
                                                    <span class="badge badge-warning">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                                case ExpeditionOrderStatus.ProcessingRefused:
                                                    <span class="badge badge-danger">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                                case ExpeditionOrderStatus.ErrorProcessing:
                                                    <span class="badge badge-dark">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                                case ExpeditionOrderStatus.ErrorIntegration:
                                                    <span class="badge badge-info">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                                case ExpeditionOrderStatus.ErrorPickingList:
                                                    <span class="badge badge-light">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                                case ExpeditionOrderStatus.InPickingList:
                                                    <span class="badge badge-primary">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;
                                                case ExpeditionOrderStatus.Packed:
                                                    <span class="badge badge-packing-finalize-custom-color">@Html.DisplayFor(modelItem => item.Status)</span>
                                                    break;

                                            case ExpeditionOrderStatus.Dispatched:
                                                <span class="badge badge-success">@Html.DisplayFor(modelItem => item.Status)</span>
                                                break;
                                            default:
                                                <span class="badge badge-primary">@Html.DisplayFor(modelItem => item.Status)</span>
                                                break;

                                            }
                                        }

                                        
                                    </td>
                                }



                                @if (item.Status == LOGHouseSystem.Infra.Enums.ExpeditionOrderStatus.Separated && Model.UserLoged.PermissionLevel != PermissionLevel.Client)
                                {
                                    <td>

                                        @*                                        <a id="btn_send_packing" class="btn btn-primary btn-sm" role="button" title="Enviar para Empacotamento" asp-route-id="@item.Id" asp-controller="Packing" asp-action="Create">
                            <i class="fa fa-arrow-right"></i> <i class="fa fa-box-open"></i>
                            </a>*@
                                        <a id="btn_send_packing" class="btn btn-primary btn-sm" role="button" title="Enviar para Empacotamento" data-id="@item.Id">
                                            <i class="fa fa-arrow-right"></i> <i class="fa fa-box-open"></i>
                                        </a>

                                        @if (item.ExpeditionOrderTagShipping != null)
                                        {
                                            <a asp-action="ShowTag" asp-route-id="@item.Id" target="_blank" class="btn btn-warning">
                                                <i class="fa-fw fa-file"></i> Visualizar etiqueta de envio
                                            </a>

                                        }
                                        else if (item.ExpeditionOrderTagShipping == null && item.Status != LOGHouseSystem.Infra.Enums.ExpeditionOrderStatus.ProcessingRefused && item.ShippingMethod != LOGHouseSystem.Infra.Enums.ShippingMethodEnum.Other && Model.UserLoged.PermissionLevel != PermissionLevel.Client)
                                        {
                                            <a href="@Url.Action("ProcessTag","ExpeditionOrder", new{id=item.Id, page=Model.Page})" class="btn btn-primary btn-sm" title="Buscar Etiqueta">
                                                <i style="color" class="fa-fw fa-solid fa-search"></i> <i class="fa-fw fa-solid fa-tag"></i>
                                            </a>

                                        }
                                    </td>
                                }
                                else
                                {
                                    <td class="d-flex ">
                                        @*<a class="btn btn-warning" role="button" title="Anexar Produtos" asp-route-id="@item.Id" asp-controller="ExpeditionOrder" asp-action="SetProduct">Adicionar Produtos</a>*@
                                        @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Integration && Model.UserLoged.PermissionLevel != PermissionLevel.Client)
                                        {
                                            <a title="Ver mais" href="@Url.Action("ViewMoreIntegration", "ExpeditionOrder", new{id = item.Id})"><i class=" fa fa-fw fa-eye mr-2"></i></a>
                                        }
                                        else
                                        {
                                            @if (item.Status == LOGHouseSystem.Infra.Enums.ExpeditionOrderStatus.Processed && @Model.UserLoged.PermissionLevel != PermissionLevel.Client)
                                            {

                                                <a onclick="actionToRecuse(@item.Id)" style="color: red; cursor: pointer" title="Cancelar"><i class=" fa  fa-ban mr-2"></i></a>
                                            }
                                        }


                                        @if (item.ExpeditionOrderTagShipping != null)
                                        {
                                            <a asp-action="ShowTag" asp-route-id="@item.Id" target="_blank" data-toggle="tooltip" title="Visualizar etiqueta de envio" target="_blank">
                                                <i class="fa-fw fa-solid fa-file"></i>
                                            </a>

                                        }
                                        else if (item.ExpeditionOrderTagShipping == null && item.Status != LOGHouseSystem.Infra.Enums.ExpeditionOrderStatus.ProcessingRefused && item.ShippingMethod != LOGHouseSystem.Infra.Enums.ShippingMethodEnum.Other)
                                        {
                                            <a class="mr-2" href="@Url.Action("ProcessTag","ExpeditionOrder", new{id=item.Id, page=Model.Page.GetDescription()})" title="Buscar Etiquetaconsult">
                                                <i class="fa-fw fa-solid fa-download"></i>
                                            </a>
                                        }

                                        @if (item.OrderOrigin == OrderOrigin.ClientPanel && item.Status == ExpeditionOrderStatus.ProcessingPendenting && Model.UserLoged.PermissionLevel == PermissionLevel.Client)
                                        {

                                            <a  title="Adicionar Produtos" href="@Url.Action("SetProduct", "ExpeditionOrder", new{id = item.Id})"><i class=" fa fa-fw fa-bag-shopping mr-2"></i></a>
                                            <a href="@Url.Action("Cancel", "ExpeditionOrder", new{id = item.Id})" style="color: red; cursor: pointer" title="Cancelar"><i class=" fa fa-fw fa-ban mr-2"></i></a>

                                        }

                                        @if (Model.UserLoged.PermissionLevel == PermissionLevel.Client && item.OrderOrigin == OrderOrigin.XMLCreation && item.Status == ExpeditionOrderStatus.Processed)
                                        {

                                             <a href="@Url.Action("Cancel", "ExpeditionOrder", new{id = item.Id})" style="color: red; cursor: pointer" title="Cancelar"><i class=" fa fa-fw fa-ban mr-2"></i></a>
                                        }

                                        <a class="ml-2" style="color: #4E73DF; cursor: pointer" onclick="viewHistory(@item.Id)" data-toggle="modal" data-target="#exampleModalCenter" title="Ver Histórico do Pedido"><i class="fa fa-fw fa-clock-rotate-left mr-2"></i></a>


                                        @if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Orders)
                                        {
                                            <a title="Ver mais" href="@Url.Action("ViewMoreOrders", "ExpeditionOrder", new{id = item.Id, routeUrl = $"{Url.Action("Orders","ExpeditionOrder")}"})"><i class=" fa fa-fw fa-eye mr-2"></i></a>
                                        }

                                    </td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>



<!-- Modal -->
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Histórico do Pedido</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="noContentHistory">Esse pedido não possui histórico!</div>
                <div id="contentHistory"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="closeModal" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModalCenterr" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="false">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Ações</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="text-center">
                    <h5>Imprimir DANFE Simplificada</h5>
                    <a id="generateDanfe" class="btn btn-primary">Imprimir</a>
                </div>
                <br />
                <br />
                <h5 class="text-center">Visualizar Etiquetas</h5>
                <div id="buttonsContainer" class="text-center">
                    <h5>Visualizar Etiquetas</h5>
                    @*<a id="generateMEUrl" class="btn btn-primary">Visualizar Etiquetas</a>*@
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>


<style>
    .badge {
        width: 100px;
    }

    .format-pre {
        padding: 10px;
        font-size: 14px;
        width: 850px !important;
    }
</style>


@section Scripts {

    <script src="~/vendor/datatables/jquery.datatables.min.js"></script>
    <script src="~/vendor/datatables/datatables.bootstrap4.min.js"></script>
    <script src="~/lib/jQuery-Mask-Plugin-master/src/jquery.mask.js"></script>
    <script src="~/vendor/Tiny-Vertical-Timeline-Plugin-with-jQuery-jQuery-UI/src/jquery-ui.js"></script>
    <script src="~/vendor/Tiny-Vertical-Timeline-Plugin-with-jQuery-jQuery-UI/src/jquery.timeline.js"></script>
    <link type="text/css" href="~/vendor/datatables/dataTables.checkboxes.css" rel="stylesheet" />
    <script type="text/javascript" src="~/vendor/datatables/dataTables.checkboxes.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="~/js/moment.min.js"></script>

    <script>

        function acceptSingle(p) {
            if (!!$(p).attr('disabled')) {
                return;
            }

            var itemId = $(p).attr("itemId");
            clearInputParams();
            addInputParams(itemId);
            actionApproveOrRecuse("approve");
        }

        function rejectSingle(p) {
            console.log("bateu")
            if (!!$(p).attr('disabled')) {
                return;
            }

            var itemId = $(p).attr("itemId");
            clearInputParams();
            addInputParams(itemId);
            actionApproveOrRecuse("recuse");
        }

        function addInputParams(rowId) {
            var form = $("#content-approve-recuse");
            form.append($('<input>').attr('type', 'hidden').attr('name', 'selecteds').val(rowId));
        }

        function clearInputParams() {
            var form = $("#content-approve-recuse");
            form.html("");
        }

        function actionApproveOrRecuse(action) {
            disableButtons();
            var form = $("#content-approve-recuse");

            form.append($('<input>').attr('type', 'hidden').attr('name', 'action').val(action));


            $.ajax({
                url: '/ExpeditionOrder/ActionApproveOrRecuse?' + form.serialize(),
                type: 'GET',
                dataType: 'json',
                beforeSend: function () {
                    swal.fire({
                        html: '<h5>Processando Pedidos...</h5>',
                        showConfirmButton: false,
                        onRender: function () {
                            // there will only ever be one sweet alert open.
                            $('.swal2-content').prepend(sweet_loader);
                        }
                    });
                },
                success: function (data) {
                    enableButtons();
                    location.reload();
                },
                error: function (xhr) {
                    var arrayErrors = xhr.responseJSON;
                    let errorMessages = arrayErrors.map(err => err.message).join('<br>');
                    var orderId = arrayErrors.map(err => err.orderid);

                    Swal.fire({
                        title: 'Ops, Ocorreu um erro com alguns pedidos!',
                        html: errorMessages + "<br><h5>Deseja notificar o cliente ? " + "<br>" + "(Uma notificação será disparada para o endereço de Email cadastrado)</h5>",
                        icon: 'error',
                        customClass: 'format-pre',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        cancelButtonText: 'Cancelar',
                        confirmButtonText: 'Enviar',
                        showLoaderOnConfirm: true
                    }).then((result) => {
                        if (result.isConfirmed) {

                            var subject = "Erro no Pedido"
                            var message = errorMessages;
                            var orderId = arrayErrors[0].orderId
                            // let url = `@Url.Action("SendEmailWithMessage", "Email")?subject=${subject}&message=${message}&orderId=${orderId}`;
                            // window.location.href = url;

                            $.ajax({
                                url: '@Url.Action("SendEmailWithMessage", "Email")',
                                method: 'POST',
                                data: {
                                    subject: subject,
                                    message: message,
                                    orderId: orderId
                                },
                                success: function (res) {
                                    let title = 'Ops!';
                                    if (res.status == "success") {
                                        title = "Email enviado"
                                    }

                                    Swal.fire({
                                        icon: res.status,
                                        title: title,
                                        text: res.message
                                    });
                                },
                                error: function (err) {
                                    Swal.fire({
                                       icon: 'error',
                                       title: 'Ops!',
                                       text: 'Não foi possível enviar o email houve uma falha na comunicação com o backend.'
                                    });
                                }
                            })

                        } else {
                            window.location.reload();
                            //Swal.fire({
                            //    icon: 'error',
                            //    title: 'Ops!',
                            //    text: 'Não foi possível cancelar o pedido no momento, por favor,tente novamente mais tarde.'
                            //});
                        }
                    });
                    enableButtons();
                }
            });
        }
        //Order enum
        var statusDescriptionMapping = {
            1: "Aguardando processamento",
            2: "Processado",
            3: "Em picking list",
            4: "Separado",
            5: "Em Empacotamento",
            6: "Empacotado",
            7: "Expedido",
            100: "Erro de integração",
            101: "Erro de processamento",
            102: "Erro de picking list",
            103: "Processamento Recusado",
            104: "Cancelado"
        };

        function viewHistory(id) {
            $.ajax({
                url: `/ExpeditionOrder/GetExpeditionOrderHistoryById?orderId=${id}`,
                method: 'GET',
                success: (dataContent) => {
                    try {
                        $("#contentHistory").timeline("destroy"); // will destroy a timeline if exists
                    } catch (e) {
                    }

                    $("#contentHistory").html('');
                    if (dataContent.length === 0) {

                        $("#noContentHistory").show();

                    } else {
                        $("#noContentHistory").hide();
                        var timelineData = [];

                        for (var i = 0; i < dataContent.length; i++) {
                            var statusValue = dataContent[i].status;  // Assuming status value is present in dataContent[i]
                            var statusDescription = statusDescriptionMapping[statusValue];

                            var content = dataContent[i].user.username + "<br>" + "Status atual: " + statusDescription + "<br>" + dataContent[i].observation + "<br>" + moment(dataContent[i].date).format('DD/MM/YYYY hh:mm');

                            timelineData.push({
                                time: new Date(dataContent[i].date),
                                color: '#555',
                                cssClass: 'success',
                                content: content
                            });
                        }

                        $("#contentHistory").timeline({
                            data: timelineData
                        });
                    }

                },
                error: (err) => {
                    if (err.status === 404) {
                        Swal.fire({
                            title: 'Ops! A operação falhou',
                            text: 'Não foi possível visualisar o histórico desse pedido',
                            icon: 'error',
                            confirmButtonText: 'Continuar'
                        });
                    }
                }
            });
        }

        function closeModal() {
            $("#contentHistory").html('');
        }


        $("#statusClick").timeline({

            data: [{
                time: new Date(),
                color: '#555',
                css: 'success',
                content: 'Hello <a href="https://www.jqueryscript.net/tags.php?/Timeline/">Timeline</a>'
            }]

        });


        $(document).ready(function () {
            $('#btn_send_packing').click(function () {
                if ($(this).hasClass('clicked')) {
                    return;
                }
                $(this).addClass('clicked');

                $(this).addClass('btn-secondary');
                $(this).removeClass('btn-primary');

                var id = $(this).data('id');
                window.location.href = '/Packing/Create/' + id;
            });
        });

        var table;
        $(document).ready(function () {

            var tableConfiguration = {
                "scrollY": "800px", // Altura do scroll, você pode ajustar conforme necessário
                "scrollCollapse": true,
                "language": {
                    "sEmptyTable": "Nenhum registro encontrado",
                    "sInfo": "Mostrando _START_ de _END_ de um total de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando 0 registros",
                    "sInfoFiltered": "(Filtrados de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Mostrar _MENU_ resultados por página",
                    "sLoadingRecords": "Carregando...",
                    "sProcessing": "Processando...",
                    "sZeroRecords": "Nenhum registro encontrado",
                    "sSearch": "Pesquisar",
                    "oPaginate": {
                        "sNext": "Próximo",
                        "sPrevious": "Anterior",
                        "sFirst": "Primeiro",
                        "sLast": "Último"
                    },
                    "oAria": {
                        "sSortAscending": ": Ordenar colunas de forma ascendente",
                        "sSortDescending": ": Ordenar colunas de forma descendente"
                    },
                },
                'columnDefs': [
                    {
                        'targets': 0,
                        'checkboxes': {
                            'selectRow': true
                        }
                    },
                ],
                'select': {
                    'style': 'multi'
                },
                paging: false,
                info: false,
                search: false
            }

        @{
            if (Model.Page == LOGHouseSystem.ViewModels.ExpeditionOrdersPage.Integration)
            {
                <text>
                        tableConfiguration["iDisplayLength"] = 100;
                    tableConfiguration["language"]["sLengthMenu"] = "";
                </text>
            }
        }

                table = $('#datatable').DataTable
                    (tableConfiguration);

            $('.paginate_button').hide();

            $('#btn-accept').on('click', function (e) {
                if (!!$('#btn-accept').attr('disabled')) {
                    return;
                }
                addCheckBoxIds("approve");
            });

            $('#btn-reject').on('click', function (e) {
                if (!!$('#btn-reject').attr('disabled')) {
                    return;
                }
                addCheckBoxIds("recuse");
            });

            $("#loadingSpinner").hide();
            $('#cnpj').mask('00.000.000/0000-00', { reverse: true });

            $('#datatable tbody').on('click', 'td input', function () {
                var checked = $("#datatable tbody input[type='checkbox']:checked").length > 0;
                checkInputCheckBox(checked);
            });

            $('#datatable thead').on('click', 'tr th input', function () {
                var checked = $("#datatable thead input[type='checkbox']:checked").length > 0;
                checkInputCheckBox(checked);
            });

            $(".dt-checkboxes").change(() => {
                var rows_selected = table.column(0).checkboxes.selected();

                $("#quantidadeSelecionada").html(rows_selected.length);
            });

            var selectedsArray = []
            $('#btn-simplified-list').on('click', function (e) {
                var form = $("#content-simplified-list");

                var rows_selected = table.column(0).checkboxes.selected();

                form.html("");

                selectedsArray = [];

                // Iterate over all selected checkboxes
                $.each(rows_selected, function (index, rowId) {
                    // Create a hidden element
                    form.append(
                        $('<input>')
                            .attr('type', 'hidden')
                            .attr('name', 'selecteds')
                            .val(rowId)
                    );

                    selectedsArray.push(rowId);
                });

                if (rows_selected.length <= 0) {
                    Swal.fire(
                        'Opss.',
                        'É necessário selecionar ao menos um pedido',
                        'warning'
                    );
                    return;
                }

                $.ajax({
                    url: '/ExpeditionOrder/CheckIfOrderIsMelhorEnvioOrNot',
                    type: 'GET',
                    data: { selecteds: selectedsArray },
                    traditional: true,
                    dataType: 'json',
                    success: function (result) {
                        if (result.length > 0) {

                            $('#buttonsContainer').empty();

                            result.forEach(function (clientArray, index) {
                                if (clientArray.length > 0) {
                                    var button = $('<a>').addClass('btn btn-primary').text('Visualizar Etiquetas');
                                    button.click(function () {

                                        handleButtonClick(clientArray);
                                    });
                                    $('#buttonsContainer').append(button);
                                }
                            });

                            $('#exampleModalCenterr').modal('show');
                        } else {
                            console.log("false");
                            $("#submit-simplified-list").click();
                        }
                    },
                    error: function (xhr, status, error) {
                        $('#exampleModalCenterr').modal('hide');
                        $('#errorAlert').show();
                        $('#errorAlert').html('<strong>Erro:</strong> Não foi possível processar os pedidos selecionados! Erro: ' + error);
                    }
                });

            });





            $('#generateDanfe').on('click', function () {
                $("#submit-simplified-list").click();

            })

            function handleButtonClick(ids) {
                $.ajax({
                    url: '/PickingList/GenerateMelhorEnvioUrl',
                    type: 'GET',
                    data: { selecteds: ids },
                    traditional: true,
                    success: function (url) {
                        if (url && url.length > 0) {

                            window.open(url, '_blank');
                        } else if (url && url.length == 0) {
                            $('#exampleModalCenterr').modal('hide');
                            $('#errorAlert').show();
                            $('#errorAlert').html('<strong>Erro:</strong> A etiqueta está cancelada ');
                        } else {

                            $('#exampleModalCenterr').modal('hide');
                            $('#errorAlert').show();
                            $('#errorAlert').html('<strong>Erro:</strong> Não foi possível gerar a URL dos pedidos selecionados. Confira se o Acess Token do Melhor Envio desse cliente ainda é valido! ');
                        }
                    },
                    error: function (xhr, status, error) {

                        $('#exampleModalCenterr').modal('hide');
                        $('#errorAlert').show();
                        $('#errorAlert').html('<strong>Erro:</strong> Não foi possível gerar a URL dos pedidos selecionados!');
                    }
                });
            };

            //autocomplete function
            $(function () {
                $("#searchInput").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '/Client/AutoComplete/',
                            data: { "prefix": request.term },
                            type: "POST",
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return item;
                                }))
                            },
                            error: function (response) {
                                alert(response.responseText);
                            },
                            failure: function (response) {
                                alert(response.responseText)
                            }
                        });
                    },
                    select: function (e, i, v) {
                        $("#hfClient").val(i.item.val);
                        $("#cnpj").val(i.item.vald);
                        //$("#cnpj").prop('disabled', true);
                    },
                    minLength: 1
                });
            });

            $('#btn-picking-list').on('click', async function (e) {
                var baixa = 0;
                var media = 1;
                var alta = 2;
                var empty = 3;

                var ServicosLogistica = {
                    MercadoLivre: 0,
                    OLIST: 1,
                    Shein: 2,
                    Shopee: 3,
                    Amazon: 4,
                    Magalu: 5,
                    B2W: 6,
                    FlexMercadoLivre: 7,
                    FullMercadoLivre: 8,
                    FbaAmazon: 9,
                    RetiraCliente: 10,
                    Correios: 11,
                    JADLOG: 12,
                    TotalExpress: 13,
                    Kangu: 14,
                    FlexMagalu: 15,
                    Aliexpress: 16,
                    TransportadoraDiversas: 17,
                    MelhorEnvio: 18,
                    FullMagalu: 19,
                    FullAmazon: 20,
                    empty: 103
                };

                const { value: formValues } = await Swal.fire({
                    title: 'Detalhes:',
                    html: `
                                            <h4 style="margin-bottom: 0;">Prioridade:</h4>
                                    <br>
                                    <select style="margin-bottom: 0;" id="priority-select" class="swal2-select">
                                                <option value="${empty}">Selecione</option>
                                        <option value="${baixa}">Baixa</option>
                                        <option value="${media}">Média</option>
                                        <option value="${alta}">Alta</option>
                                    </select>
                                    <br>
                                            <br>
                                            <h4 style="margin-bottom: 0;">MarketPlace:</h4>
                                       <select style="margin-bottom: 0;" id="marketplace-select" class="swal2-select">
                                            <option value="${ServicosLogistica.empty}">Selecione</option>
                                            <option value="${ServicosLogistica.Aliexpress}">Aliexpress</option>
                                            <option value="${ServicosLogistica.Amazon}">Amazon</option>
                                            <option value="${ServicosLogistica.B2W}">B2W</option>
                                            <option value="${ServicosLogistica.Correios}">Correios</option>
                                            <option value="${ServicosLogistica.FbaAmazon}">FBA Amazon</option>
                                            <option value="${ServicosLogistica.FlexMagalu}">Flex Magalu</option>
                                            <option value="${ServicosLogistica.FlexMercadoLivre}">Flex Mercado Livre</option>
                                            <option value="${ServicosLogistica.FullAmazon}">Full Amazon</option>
                                            <option value="${ServicosLogistica.FullMagalu}">Full Magalu</option>
                                            <option value="${ServicosLogistica.FullMercadoLivre}">Full Mercado Livre</option>
                                            <option value="${ServicosLogistica.JADLOG}">Jadlog</option>
                                            <option value="${ServicosLogistica.Kangu}">Kangu</option>
                                            <option value="${ServicosLogistica.Magalu}">Magalu</option>
                                            <option value="${ServicosLogistica.MelhorEnvio}">Melhor Envio</option>
                                            <option value="${ServicosLogistica.MercadoLivre}">Mercado Livre</option>
                                            <option value="${ServicosLogistica.OLIST}">Olist</option>
                                            <option value="${ServicosLogistica.RetiraCliente}">Retira Cliente</option>
                                            <option value="${ServicosLogistica.Shein}">Shein</option>
                                            <option value="${ServicosLogistica.Shopee}">Shopee</option>
                                            <option value="${ServicosLogistica.TotalExpress}">Total Express</option>
                                            <option value="${ServicosLogistica.TransportadoraDiversas}">Transportadora Diversas</option>
                                      </select>
                                    <br>
                                    <br>
                                    <h4>Observação:</h4>
                                    <textarea id="textarea-field" class="swal2-textarea" placeholder="Escreva sua observação aqui..."></textarea>
                                `,
                    focusConfirm: false,
                    preConfirm: () => {
                        return {
                            priority: document.getElementById('priority-select').value,
                            observation: document.getElementById('textarea-field').value,
                            marketplace: document.getElementById('marketplace-select').value
                        };
                    }
                });



                if (formValues.priority != 3 && formValues.marketplace != 103) {
                    $("#observation-picking-list").val(formValues.observation);
                    $("#priority-picking-list").val(formValues.priority);
                    $("#marketplace-picking-list").val(formValues.marketplace)
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Por favor, preencha os campos disponibilizador ao tentar gerar uma lista de separação!',
                    })

                    return;
                }

                var form = $("#content-picking-list");
                var rows_selected = table.column(0).checkboxes.selected();

                form.html("");

                // Iterate over all selected checkboxes
                $.each(rows_selected, function (index, rowId) {
                    // Create a hidden element
                    form.append(
                        $('<input>')
                            .attr('type', 'hidden')
                            .attr('name', 'selecteds')
                            .val(rowId)
                    );
                });

                if (rows_selected.length <= 0) {
                    Swal.fire(
                        'Ops!',
                        'É necessário selecionar ao menos um pedido',
                        'warning'
                    );
                    return;
                }

                $("#submit-picking-list").click();
            });

            $("#searchForm").submit(() => {
                $("#submitButton").hide();
                $("#loadingSpinner").show();
            })

            function checkInputCheckBox(checked) {
                if (checked) {
                    $(".actionsSelection").css("visibility", "visible");
                } else {
                    $(".actionsSelection").css("visibility", "hidden");
                }
            }

            var checkboxInput = $('.dt-checkboxes-cell :input');


            var isChecked = checkboxInput.prop('checked');


            if (isChecked) {
                $(".actionsSelection").css("visibility", "visible");
            } else {
                $(".actionsSelection").css("visibility", "hidden");
            }





            function addCheckBoxIds(action) {
                var rows_selected = table.column(0).checkboxes.selected();


                clearInputParams();

                $.each(rows_selected, function (index, rowId) {
                    addInputParams(rowId);
                });

                if (rows_selected.length <= 0) {
                    Swal.fire(
                        'Opss.',
                        'É necessário selecionar ao menos um pedido',
                        'warning'
                    );
                    return;
                }

                actionApproveOrRecuse(action);
            }

            function disableButtons() {
                $(".btn-action").attr('disabled', 'disabled');
                $(".btn-action").css('background', '#d3d3d3');
                $(".btn-action").css('border-color', '#d3d3d3');
            }

            function enableButtons() {
                $(".btn-action").removeAttr('disabled');

                $(".btn-success").css('background', '#1cc88a');
                $(".btn-success").css('border-color', '#1cc88a');

                $(".btn-danger").css('background', '#e74a3b');
                $(".btn-danger").css('border-color', '#e74a3b');
            }

        })

        function actionToRecuse(id) {
            disableButtons();
            var form = $("#content-approve-recuse");

            //*orm.append($('<input>').attr('type', 'hidden').attr('name', 'action').val(action));*/
            Swal.fire({
                title: "Tem certeza que deseja cancelar esse pedido?",
                input: 'textarea',
                html: '<p>Será enviado um Email ao cliente, por favor, digite o motivo da recusa abaixo:</p>',
                inputPlaceholder: 'Escreva o motivo da recusa aqui...',
                inputAttributes: {
                    'aria-label': 'Escreva sua mensagem aqui.'
                },
                showCancelButton: true,
                cancelButtonText: 'Voltar',
                confirmButtonText: 'Enviar'
            }).then((result) => {
                if (result.value) {
                    const text = result.value; // Obtenha o valor do campo de texto
                    var subject = "Cancelamento de pedido"
                    let url = `@Url.Action("Cancel", "ExpeditionOrder")?id=${id}&subject=${subject}&subject=${text}&message=${text}`;
                    window.location.href = url;
                }
                enableButtons();
            });
        }

        function disableButtons() {
            $(".btn-action").attr('disabled', 'disabled');
            $(".btn-action").css('background', '#d3d3d3');
            $(".btn-action").css('border-color', '#d3d3d3');
        }

        function enableButtons() {
            $(".btn-action").removeAttr('disabled');

            $(".btn-success").css('background', '#1cc88a');
            $(".btn-success").css('border-color', '#1cc88a');

            $(".btn-danger").css('background', '#e74a3b');
            $(".btn-danger").css('border-color', '#e74a3b');
        }
    </script>
}
